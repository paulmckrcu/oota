The "o" items assume a venue (such as a tech report) that have relaxed
page limits.  

O	Detailed feedback from Review #72C.

o	Early in the paper, consider explicitly stating that after 20
	years it appears that the problem of characterizing semantic
	dependency is too difficult to solve in the context provided by
	the C++ standard (i.e., the abstract machine) and therefore we
	expand the context by considering actual machine-level executions.

x	s/We would be happy to change "explicitly prohibits"/"explicitly recommends against"/
	This is prior to the quote from the C++ standard.

x	s/Workers/Researcher/ in Section 1.2.

O	Add citations to Section 1.2 ("Prior Work").

x	Add a forward reference to Section 4.2 ("Global Optimization
	Can Destroy Dependencies") and the fact that this defeats the
	approach of ordering relaxed loads before relaxed stores.

x	Be less condescending towards Mark Batty.  Maybe
	s/is persisting with/is working on/.

o	Add a Section 1.3 ("Our Approach"?) that summarizes the
	rfe/sdep/non-sdep-dep approach and emphasizes proving
	OOTA cannot happen as opposed to an exact delineation
	between sdep and non-sdep.

o	Add citations to later sections that discuss litmus tests
	that are similar to those in the literature.

o	Consider adding a 2.2.x section that discusses the difficulties
	inherent in computing sdep for function calls, especially when
	the function will be part of a dynamic library that has not yet
	been written.

o	In section 2.2 where we start to talk about semantic dependencies
	in detail, we could mention syntactic dependencies too.  Explain
	what they are and how they differ from semantic dependencies.
	Then mention that some work in the literature (such as parts of
	[5]) is not always careful to distinguish clearly between the
	two forms.  Maybe have an entire subsection on this topic.

x	In Section 4.2 ("Global Optimization Can Destroy Dependencies"),
	note that this optimization breaks the approach of ordering
	relaxed loads before relaxed stores.

x	In section 6.1, define "witness" informally as "another execution
	in which the load(s) obtain a different value but all else is
	the same as far as possible, and yet the store acts differently".

o	Add diagrams illustrating what the various components of sections
	6.1 and 6.3 refer to.

x	On page 9, "While it possible".  [ Since fixed by Alan. ]

O	In Section 7.4 ("Merging Quasi-Volatile Loads"), change focus
	from intuitive notions to a community-process approach for
	determining what optimizations are legitimate.  Math cannot
	handle this.  We avoid the problem by looking at the compiler
	implementation, which is downstream of the community process.

	Also in Section 7.4 change "our intuitive notions" to "one's
	intuitive notions".

o	Add a section before Section 7 ("Issues and Refinements") that
	shows how our approach handles a few well-known examples of OOTA.
	This needs to be in greater detail than in the "Causality Test
	Cases" discussions in P3064R2 ("How to Avoid OOTA Without Really
	Trying").

o	Possible future work: Relax quasi-volatile semantics to permit
	load speculation, for example, use of the cmov instruction in
	cases where the source code conditionally executes the atomic
	load.
