C oota-causality-11
(*
 * Result: Never
 *
 * http://www.cs.umd.edu/~pugh/java/memoryModel/unifiedProposal/testcases.html
 *
 * Decision: Disallowed. Since no other thread accesses the array a,
 *   the code for thread 1 should be equivalent to:
 *
 *	r1 = x
 *	a[r1] = 0
 *	if (r1 == 0)
 *        r2 = 0
 *      else
 *        r2 = 1
 *	y = r2
 *
 *  With this code, it is clear that this is the same situation as
 *  test 4.
 *)
{
	[y] = 0;
	[z] = 0;
	[a[0]] = 1;
	[a[1]] = 2;
}

P0(atomic_int **a, atomic_int *x, atomic_int *y) {
	int r1 = atomic_load_explicit(x, memory_order_relaxed);
	atomic_store_explicit(a[r1], 0, memory_order_relaxed);
	int r2 = atomic_load_explicit(a[0], memory_order_relaxed);
	atomic_store_explicit(y, r2, memory_order_relaxed);
}

P1(atomic_int **a, atomic_int *x, atomic_int *y) {
	int r3 = atomic_load_explicit(y, memory_order_relaxed);
	atomic_store_explicit(x, r3, memory_order_relaxed);
}

exists(0:r1=1 /\ 0:r2=1 /\ 1:r3=1)
