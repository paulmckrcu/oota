C oota-causality-8
(*
 * Result: Sometimes (but requires modeling the compiler)
 *
 * http://www.cs.umd.edu/~pugh/java/memoryModel/unifiedProposal/testcases.html
 *
 * Decision: Allowed. Interthread analysis could determine that x and y
 *	are always either 0 or 1, and thus determine that r2 is always 1.
 *	Once this determination is made, the write of 1 to y could be
 *	moved early in thread 1.
 *
 * Note: I used a different deterministic computation, but r2==1.
 *	I also modified their condition, but it should be equivalent.
 *)
{
	[x] = 0;
	[y] = 0;
}

P0(atomic_int *x, atomic_int *y) {
	int r1 = atomic_load_explicit(x, memory_order_relaxed);
	int r2 = 1 + r1 * r1 - r1;
	atomic_store_explicit(y, r2, memory_order_relaxed);
}

P1(atomic_int *x, atomic_int *y) {
	int r3 = atomic_load_explicit(y, memory_order_relaxed);
	atomic_store_explicit(x, r3, memory_order_relaxed);
}

locations [1:r3]
exists(0:r1=1 /\ 0:r2=1)
