C oota-causality-17
(*
 * Result: Never
 *
 * http://www.cs.umd.edu/~pugh/java/memoryModel/unifiedProposal/testcases.html
 *
 * Decision: Allowed.  A compiler could determine that at r1 = x in
 *	thread 1, is must be legal for to read x and see the value
 *	42. Changing r1 = x to r1 = 42 would allow y = r1 to be
 *	transformed to y = 42 and performed earlier, resulting in the
 *	behavior in question.
 *
 * Note: Maybe for Java, but relaxed atomics in C11 prohibit violating
 *	cache coherence.  Adjusted result accordingly.
 *)
{
	[x] = 0;
	[y] = 0;
}

P0(atomic_int *x, atomic_int *y) {
	int r3 = atomic_load_explicit(x, memory_order_relaxed);
	if (r3 != 42)
		atomic_store_explicit(x, 42, memory_order_relaxed);
	int r1 = atomic_load_explicit(x, memory_order_relaxed);
	atomic_store_explicit(y, r1, memory_order_relaxed);
}

P1(atomic_int *x, atomic_int *y) {
	int r2 = atomic_load_explicit(y, memory_order_relaxed);
	atomic_store_explicit(x, r2, memory_order_relaxed);
}

exists(0:r1=42 /\ 1:r2=42 /\ 0:r3=42)
