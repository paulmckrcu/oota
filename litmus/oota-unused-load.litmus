C oota-unused-load
(*
 * Result: Never
 *
 * Demonstration of surprising consequences of inventing atomic loads.
 * Note that C++ respects neither control nor data dependencies,
 * allowing the OOTA result in absence of the restriction.
 *)
{
	[x] = 0;
	[y] = 0;
	[z] = 0;
}

P0(atomic_int *x, atomic_int *y, atomic_int *z) {
	int r0 = atomic_load_explicit(x, memory_order_relaxed) != 0;
	int r1 = atomic_load_explicit(x, memory_order_relaxed) != 0;
	int r2 = atomic_load_explicit(y, memory_order_relaxed) != 0;
	atomic_store_explicit(z, r1 == r2, memory_order_relaxed);
}

P1(atomic_int *x, atomic_int *y, atomic_int *z) {
	int r3 = atomic_load_explicit(z, memory_order_relaxed);
	atomic_store_explicit(y, r3, memory_order_relaxed);
}

P2(atomic_int *x, atomic_int *y, atomic_int *z) {
	atomic_store_explicit(x, 1, memory_order_relaxed);
}

locations [x;y;z]
exists(0:r1=1 /\ 0:r2=1)
