C oota-causality-1
(*
 * Result: Sometimes
 *
 * http://www.cs.umd.edu/~pugh/java/memoryModel/unifiedProposal/testcases.html
 *
 * Decision: Allowed, since interthread compiler analysis could determine that
 *	x and y are always non-negative, allowing simplification of r1 >= 0
 *	to true, and allowing write y = 1 to be moved early.
 *
 * Note: "herd7 -c11" forbids this test.
 *)
{
	[x] = 0;
	[y] = 0;
}

P0(volatile atomic_int *x, volatile atomic_int *y) {
	int r1 = atomic_load_explicit(x, memory_order_relaxed);
	if (r1 >= 0)
		atomic_store_explicit(y, 1, memory_order_relaxed);
}

P1(volatile atomic_int *x, volatile atomic_int *y) {
	int r2 = atomic_load_explicit(y, memory_order_relaxed);
	atomic_store_explicit(x, r1, memory_order_relaxed);
}

exists(0:r1=1 /\ 1:r2=1)
