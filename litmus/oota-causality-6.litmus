C oota-causality-6
(*
 * Result: Sometimes (but requires modeling the compiler)
 *
 * http://www.cs.umd.edu/~pugh/java/memoryModel/unifiedProposal/testcases.html
 *
 * Decision: Allowed. Intrathread analysis could determine that thread 2
 *	always writes 1 to x and hoist the write to the beginning of thread 2.
 *
 * For uniformity, this litmus test uses x and y.  The mapping from
 * testcases.html is A->x and B->y.
 *)
{
	[x] = 0;
	[y] = 0;
}

P0(atomic_int *x, atomic_int *y) {
	int r1 = atomic_load_explicit(x, memory_order_relaxed);
	if (r1 == 1)
		atomic_store_explicit(y, r1, memory_order_relaxed);
}

P1(atomic_int *x, atomic_int *y) {
	int r2 = atomic_load_explicit(y, memory_order_relaxed);
	if (r2 == 1) {
		atomic_store_explicit(x, 1, memory_order_relaxed);
	}
	if (r2 == 0) {
		atomic_store_explicit(x, 1, memory_order_relaxed);
	}
}

exists(0:r1=1 /\ 1:r2=1)
