C oota-causality-2
(*
 * Result: Sometimes
 *
 * http://www.cs.umd.edu/~pugh/java/memoryModel/unifiedProposal/testcases.html
 *
 * Decision: Allowed, since redundant read elimination could result in
 *	simplification of r1 == r2 to true, allowing y = 1 to be moved early.
 *)
{
	[x] = 0;
	[y] = 0;
}

P0(volatile atomic_int *x, volatile atomic_int *y) {
	int r1 = atomic_load_explicit(x, memory_order_relaxed);
	int r2 = atomic_load_explicit(x, memory_order_relaxed);
	if (r1 == r2)
		atomic_store_explicit(y, 1, memory_order_relaxed);
}

P1(volatile atomic_int *x, volatile atomic_int *y) {
	int r3 = atomic_load_explicit(y, memory_order_relaxed);
	atomic_store_explicit(x, r3, memory_order_relaxed);
}

exists(0:r1=1 /\ 0:r2=1 /\ 1:r3=1)
